// vite.config.ts
import { defineConfig } from "file:///C:/Users/6572w/Desktop/CodeProject/Douren-Monorepo/pkg/ui/node_modules/vite/dist/node/index.js";
import dts from "file:///C:/Users/6572w/Desktop/CodeProject/Douren-Monorepo/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.3.1",
  "react-dom": "^18.3.1"
};

// vite.config.ts
import path from "path";
var __vite_injected_original_dirname = "C:\\Users\\6572w\\Desktop\\CodeProject\\Douren-Monorepo\\pkg\\ui";
var vite_config_default = defineConfig({
  build: {
    lib: {
      entry: "./src/index.ts",
      // Specifies the entry point for building the library.
      name: "ui",
      // Sets the name of the generated library.
      fileName: (format) => `index.${format}.js`,
      // Generates the output file name based on the format.
      formats: ["cjs", "es"]
      // Specifies the output formats (CommonJS and ES modules).
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
      // Defines external dependencies for Rollup bundling.
    },
    sourcemap: true,
    // Generates source maps for debugging.
    emptyOutDir: true
    // Clears the output directory before building.
  },
  plugins: [dts()],
  // Uses the 'vite-plugin-dts' plugin for generating TypeScript declaration files (d.ts).
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src"),
      "@components": path.resolve(__vite_injected_original_dirname, "./src/components")
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcNjU3MndcXFxcRGVza3RvcFxcXFxDb2RlUHJvamVjdFxcXFxEb3VyZW4tTW9ub3JlcG9cXFxccGtnXFxcXHVpXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFw2NTcyd1xcXFxEZXNrdG9wXFxcXENvZGVQcm9qZWN0XFxcXERvdXJlbi1Nb25vcmVwb1xcXFxwa2dcXFxcdWlcXFxcdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1VzZXJzLzY1NzJ3L0Rlc2t0b3AvQ29kZVByb2plY3QvRG91cmVuLU1vbm9yZXBvL3BrZy91aS92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XHJcbmltcG9ydCBkdHMgZnJvbSBcInZpdGUtcGx1Z2luLWR0c1wiO1xyXG5pbXBvcnQgeyBwZWVyRGVwZW5kZW5jaWVzIH0gZnJvbSBcIi4vcGFja2FnZS5qc29uXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gICAgYnVpbGQ6IHtcclxuICAgICAgICBsaWI6IHtcclxuICAgICAgICAgICAgZW50cnk6IFwiLi9zcmMvaW5kZXgudHNcIiwgLy8gU3BlY2lmaWVzIHRoZSBlbnRyeSBwb2ludCBmb3IgYnVpbGRpbmcgdGhlIGxpYnJhcnkuXHJcbiAgICAgICAgICAgIG5hbWU6IFwidWlcIiwgLy8gU2V0cyB0aGUgbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIGxpYnJhcnkuXHJcbiAgICAgICAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCwgLy8gR2VuZXJhdGVzIHRoZSBvdXRwdXQgZmlsZSBuYW1lIGJhc2VkIG9uIHRoZSBmb3JtYXQuXHJcbiAgICAgICAgICAgIGZvcm1hdHM6IFtcImNqc1wiLCBcImVzXCJdLCAvLyBTcGVjaWZpZXMgdGhlIG91dHB1dCBmb3JtYXRzIChDb21tb25KUyBhbmQgRVMgbW9kdWxlcykuXHJcbiAgICAgICAgfSxcclxuICAgICAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGVlckRlcGVuZGVuY2llcyldLCAvLyBEZWZpbmVzIGV4dGVybmFsIGRlcGVuZGVuY2llcyBmb3IgUm9sbHVwIGJ1bmRsaW5nLlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc291cmNlbWFwOiB0cnVlLCAvLyBHZW5lcmF0ZXMgc291cmNlIG1hcHMgZm9yIGRlYnVnZ2luZy5cclxuICAgICAgICBlbXB0eU91dERpcjogdHJ1ZSwgLy8gQ2xlYXJzIHRoZSBvdXRwdXQgZGlyZWN0b3J5IGJlZm9yZSBidWlsZGluZy5cclxuICAgIH0sXHJcbiAgICBwbHVnaW5zOiBbZHRzKCldLFxyXG4gICAgLy8gVXNlcyB0aGUgJ3ZpdGUtcGx1Z2luLWR0cycgcGx1Z2luIGZvciBnZW5lcmF0aW5nIFR5cGVTY3JpcHQgZGVjbGFyYXRpb24gZmlsZXMgKGQudHMpLlxyXG4gICAgcmVzb2x2ZToge1xyXG4gICAgICAgIGFsaWFzOiB7XHJcbiAgICAgICAgICAgICdAJzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vc3JjJyksXHJcbiAgICAgICAgICAgICdAY29tcG9uZW50cyc6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuL3NyYy9jb21wb25lbnRzJyksXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbn0pOyIsICJ7XHJcbiAgXCJuYW1lXCI6IFwiQHBrZy91aVwiLFxyXG4gIFwidmVyc2lvblwiOiBcIjEuMC4wXCIsXHJcbiAgXCJrZXl3b3Jkc1wiOiBbXSxcclxuICBcImF1dGhvclwiOiBcIlwiLFxyXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxyXG4gIFwibGljZW5zZVwiOiBcIklTQ1wiLFxyXG4gIFwiZGVzY3JpcHRpb25cIjogXCJcIixcclxuICBcIm1haW5cIjogXCJkaXN0L2Nqcy9pbmRleC5qc1wiLFxyXG4gIFwibW9kdWxlXCI6IFwiZGlzdC9lc20vaW5kZXguanNcIixcclxuICBcInR5cGVzXCI6IFwiZGlzdC9pbmRleC5kLnRzXCIsXHJcbiAgXCJmaWxlc1wiOiBbXHJcbiAgICBcImRpc3RcIlxyXG4gIF0sXHJcbiAgXCJzY3JpcHRzXCI6IHtcclxuICAgIFwiYnVpbGRcIjogXCJ0c2MgJiYgdml0ZSBidWlsZFwiLFxyXG4gICAgXCJkZXZcIjogXCJzdG9yeWJvb2sgZGV2IC1wIDYwMDYgLS1jaVwiLFxyXG4gICAgXCJzdG9yeWJvb2tcIjogXCJzdG9yeWJvb2sgZGV2IC1wIDYwMDZcIixcclxuICAgIFwiYnVpbGQtc3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGJ1aWxkXCJcclxuICB9LFxyXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiQGJpb21lanMvYmlvbWVcIjogXCIxLjkuMlwiLFxyXG4gICAgXCJAY2hyb21hdGljLWNvbS9zdG9yeWJvb2tcIjogXCJeMS45LjBcIixcclxuICAgIFwiQHJvbGx1cC9wbHVnaW4tY29tbW9uanNcIjogXCJeMjYuMC4xXCIsXHJcbiAgICBcIkByb2xsdXAvcGx1Z2luLW5vZGUtcmVzb2x2ZVwiOiBcIl4xNS4yLjNcIixcclxuICAgIFwiQHJvbGx1cC9wbHVnaW4tdGVyc2VyXCI6IFwiXjAuNC40XCIsXHJcbiAgICBcIkByb2xsdXAvcGx1Z2luLXR5cGVzY3JpcHRcIjogXCJeMTEuMS42XCIsXHJcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tZXNzZW50aWFsc1wiOiBcIl44LjMuMlwiLFxyXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWludGVyYWN0aW9uc1wiOiBcIl44LjMuMlwiLFxyXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWxpbmtzXCI6IFwiXjguMy4yXCIsXHJcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tb25ib2FyZGluZ1wiOiBcIl44LjMuMlwiLFxyXG4gICAgXCJAc3Rvcnlib29rL2Jsb2Nrc1wiOiBcIl44LjMuMlwiLFxyXG4gICAgXCJAc3Rvcnlib29rL3JlYWN0XCI6IFwiXjguMy4yXCIsXHJcbiAgICBcIkBzdG9yeWJvb2svcmVhY3Qtdml0ZVwiOiBcIl44LjMuMlwiLFxyXG4gICAgXCJAc3Rvcnlib29rL3Rlc3RcIjogXCJeOC4zLjJcIixcclxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjMuOFwiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjMuMFwiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3QtbGF6eS1sb2FkLWltYWdlLWNvbXBvbmVudFwiOiBcIl4xLjYuNFwiLFxyXG4gICAgXCJzdG9yeWJvb2tcIjogXCJeOC4zLjJcIixcclxuICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjYuMlwiLFxyXG4gICAgXCJ2aXRlXCI6IFwiXjUuNC43XCIsXHJcbiAgICBcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl40LjIuM1wiXHJcbiAgfSxcclxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4zLjFcIixcclxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjMuMVwiXHJcbiAgfSxcclxuICBcImRlcGVuZGVuY2llc1wiOiB7XHJcbiAgICBcIkBtYW50aW5lL2hvb2tzXCI6IFwiXjcuMTMuMVwiLFxyXG4gICAgXCJAcGtnL3R5cGVcIjogXCIqXCIsXHJcbiAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4xLjFcIixcclxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXZpc3VhbGx5LWhpZGRlblwiOiBcIl4xLjEuMFwiLFxyXG4gICAgXCJAc3RpdGNoZXMvcmVhY3RcIjogXCJeMS4yLjhcIixcclxuICAgIFwiQHN1cGFiYXNlL3N1cGFiYXNlLWpzXCI6IFwiXjIuNDUuNFwiLFxyXG4gICAgXCJAdWlkb3RkZXYvdXNlaG9va3NcIjogXCJeMi40LjFcIixcclxuICAgIFwiY2xhc3NuYW1lc1wiOiBcIl4yLjUuMVwiLFxyXG4gICAgXCJmcmFtZXItbW90aW9uXCI6IFwiXjExLjcuMFwiLFxyXG4gICAgXCJpbW1lclwiOiBcIl4xMC4xLjFcIixcclxuICAgIFwicmVhY3QtaWNvbnNcIjogXCJeNS4zLjBcIixcclxuICAgIFwicmVhY3QtbGF6eS1sb2FkLWltYWdlLWNvbXBvbmVudFwiOiBcIl4xLjYuMlwiLFxyXG4gICAgXCJyZWFjdC1yb3V0ZXItZG9tXCI6IFwiXjYuMjYuMlwiLFxyXG4gICAgXCJ1c2UtaW1tZXJcIjogXCJeMC4xMC4wXCIsXHJcbiAgICBcInp1c3RhbmRcIjogXCJeNS4wLjAtcmMuMlwiXHJcbiAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBNlcsU0FBUyxvQkFBb0I7QUFDMVksT0FBTyxTQUFTOzs7QUMwQ2QsdUJBQW9CO0FBQUEsRUFDbEIsT0FBUztBQUFBLEVBQ1QsYUFBYTtBQUNmOzs7QUQzQ0YsT0FBTyxVQUFVO0FBSGpCLElBQU0sbUNBQW1DO0FBS3pDLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQ3hCLE9BQU87QUFBQSxJQUNILEtBQUs7QUFBQSxNQUNELE9BQU87QUFBQTtBQUFBLE1BQ1AsTUFBTTtBQUFBO0FBQUEsTUFDTixVQUFVLENBQUMsV0FBVyxTQUFTLE1BQU07QUFBQTtBQUFBLE1BQ3JDLFNBQVMsQ0FBQyxPQUFPLElBQUk7QUFBQTtBQUFBLElBQ3pCO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDWCxVQUFVLENBQUMsR0FBRyxPQUFPLEtBQUssZ0JBQWdCLENBQUM7QUFBQTtBQUFBLElBQy9DO0FBQUEsSUFDQSxXQUFXO0FBQUE7QUFBQSxJQUNYLGFBQWE7QUFBQTtBQUFBLEVBQ2pCO0FBQUEsRUFDQSxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQUE7QUFBQSxFQUVmLFNBQVM7QUFBQSxJQUNMLE9BQU87QUFBQSxNQUNILEtBQUssS0FBSyxRQUFRLGtDQUFXLE9BQU87QUFBQSxNQUNwQyxlQUFlLEtBQUssUUFBUSxrQ0FBVyxrQkFBa0I7QUFBQSxJQUM3RDtBQUFBLEVBQ0o7QUFDSixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
